openapi: "3.0.2"
info:
  title: Shipping Microservice API
  version: "0.1"
  description: Simple Shipping Microservice REST API
servers:
  - url: http://127.0.0.1:15111/api
  - url: /api
paths:
  /shipments:
    get:
      tags: [Shipments]
      operationId: services.shipment.get_all
      summary: Get all shipments
      parameters:
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/rating'
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/product_id'
      responses:
        '200':
          description: Return shipments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shipment'
    post:
      tags: [Shipments]
      operationId: services.shipment.create
      summary: Create new shipment
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: shipment
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Return the newly created shipment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '409':
          description: Shipment already exsist
  /shipments/{shipment_id}:
    get:
      tags: [Shipment]
      operationId: services.shipment.get_one
      summary: Get a single shipment
      parameters:
        - $ref: '#/components/parameters/shipment_id'
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: shipment
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Return shipment
        '404':
          description: Shipment does not exist
    put:
      tags: [Shipment]
      operationId: services.shipment.update
      summary: Update a shipment
      parameters:
        - $ref: '#/components/parameters/shipment_id'
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: shipment
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Shipment updated
        '404':
          description: Shipment does not exsist
    delete:
      tags: [Shipment]
      operationId: services.shipment.delete
      summary: Remove a shipment
      parameters:
        - $ref: '#/components/parameters/shipment_id'
      responses:
        '204':
          description: Shipment was deleted
        '404':
          description: Shipment does not exsist
  /shipments/metadata:
    get:
      tags: [Shipments]
      operationId: services.shipment.get_metadata
      summary: Get metadata regarding all shipments
      responses:
        '200':
          description: Return shipments metadata
          content:
            application/json:
              schema:
                x-body-name: shipments_metadata
                $ref: '#/components/schemas/ShipmentsMetadata'

components:
  schemas:
    Shipment:
      type: object
      required:
        - username
        - first_name
        - last_name
        - products
        - address
      properties:
        id:
          type: integer
          format: int64
          description: Shipment's unique identifier
          example: 123
          readOnly: true
        username:
          type: string
          description: The username of the person that has the shipment
          example: "peter123"
          minLength: 1
          maxLength: 100
        first_name:
          type: string
          description: Person's first name
          example: "Peter"
          minLength: 1
        last_name:
          type: string
          description: Person's last name
          example: "Peterson"
          minLength: 1
        products:
          type: array
          items:
            $ref: "#/components/schemas/ShipmentProduct"
        address:
          type: string
          description: Person's address
          example: "Peterson Boulevard 4000"
          minLength: 1
        last_known_location:
          type: string
          description: Shipments last known location in (lon, lat) format
          example: (-123.123, +123.123)
          pattern: "^(\\()([-+]?)([\\d]{1,2})(((\\.)(\\d+)(,)))(\\s*)(([-+]?)([\\d]{1,3})((\\.)(\\d+))?(\\)))$"
        status:
          type: string
          description: Shipment's current status
          example: "ARRIVED"
          default: "IN_PROGRESS"
          enum:
            - "IN_PROGRESS"
            - "ARRIVED"
            - "NOT_SUCCESSFUL"
            - "RETURNED"
        current_transportation_type:
          type: string
          description: Shipment's current transporation type
          example: "AIRPLANE"
          default: "NOT_AVAILABLE"
          enum:
            - "NO_INFORMATION_AVAILABLE"
            - "AIRPLANE"
            - "SHIP"
            - "TRUCK"
        rating:
          type: string
          description: Person's rating about the shipment
          example: "VERY GOOD"
          default: "NO_INPUT_AVAILABLE"
          enum:
            - "NO_INPUT_AVAILABLE"
            - "VERY_GOOD"
            - "GOOD"
            - "OK"
            - "BAD"
            - "VERY_BAD"
    ShipmentProduct:
      type: object
      required:
        - product_id
        - product_name
        - quantity
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier
          example: 123
          readOnly: true
        shipment_id:
          type: integer
          format: int64
          description: Shipment's unique identifier
          example: 123
          readOnly: true
        product_id:
          type: integer
          format: int64
          description: Product's unique identifier
          example: 123
        product_name:
          type: string
          description: Product's name
          example: "ACME Computer"
        quantity:
          type: integer
          format: int32
          description: Quantity of the product
          example: 5
    ShipmentsMetadata:
      type: object
      properties:
        total_shipments:
          type: integer
          format: int32
          description: Total number of shipments
        total_in_progress:
          type: integer
          format: int32
          description: Total number of in progress shipments
        total_arrived:
          type: integer
          format: int32
          description: Total number of arrived shipments
        total_not_succssful:
          type: integer
          format: int32
          description: Total number of not successful shipments
        total_returned:
          type: integer
          format: int32
          description: Total number of returned shipments
        total_rating_very_good:
          type: integer
          format: int32
          description: Total number of very good rated shipments
        total_rating_good:
          type: integer
          format: int32
          description: Total number of good rated shipments
        total_rating_ok:
          type: integer
          format: int32
          description: Total number of ok rated shipments
        total_rating_bad:
          type: integer
          format: int32
          description: Total number of bad rated shipments
        total_rating_very_bad:
          type: integer
          format: int32
          description: Total number of very bad rated shipments

  parameters:
    shipment_id:
      name: shipment_id
      description: Shipment unique ID
      in: path
      required: true
      schema:
        type: integer
        format: int64
    username:
      name: username
      description: Person's username
      in: query
      required: false
      schema:
        type: string
    product_id:
      name: product_id
      description: Product ID
      in: query
      required: false
      schema:
        type: integer
        format: int64
    status:
      name: status
      description: Shipment status request paramterer
      in: query
      required: false
      schema:
        type: string
        enum:
          - "IN_PROGRESS"
          - "ARRIVED"
          - "NOT_SUCCESSFUL"
          - "RETURNED"
    rating:
      name: rating
      description: Shipment's rating by the user request parameter
      in: query
      required: false
      schema:
        type: string
        enum:
          - "NO_INPUT_AVAILABLE"
          - "VERY_GOOD"
          - "GOOD"
          - "OK"
          - "BAD"
          - "VERY_BAD"
        
